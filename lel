


# include <stdlib.h>
# include <unistd.h>

# ifndef BUFFER_SIZE
#  define	BUFFER_SIZE 32
# endif








// fill a given aredss and its n following ones with the \0 char
void	ft_bzero(char *s, size_t n)
{
	int	pos;

	pos = 0;
	while (n > 0)
	{
		s[pos] = '\0';
		n --;
		pos ++;
	}
}

// allocate and bzero a given amount of memory
char	*ft_calloc(size_t nelem, size_t elsize)
{
	char	*p;

	p = (char *)malloc(nelem * elsize);
	if (!p)
		return (0);
	ft_bzero(p, nelem * elsize);
	return (p);
}

// return the length of a string
size_t	ft_strlen(const char *s)
{
	size_t	len;

	len = 0;
	while (s[len] && s[len] != '\n')
	{
		len++;
	}
	return (len);
}


//return a pointer to the first instance of c in str
// return NULL if the caharcter wasn't found â˜º
char	*ft_strchr(const char *s, int c)
{
	size_t	i;

	i = 0;
	while (s[i] && s[i] != c)
	{
		i++;
	}
	if (s[i] == c)
		return ((char *)&s[i]);
	return (NULL);
}

// ovwerwrite dest with src (here: replace EOL with remainder)
static void	ft_memcpy(char *dest, char *src, int n)
{
	int		pos;

	pos = 0;
	while (pos < n && ((unsigned char *)src)[pos])
	{
		((unsigned char *)dest)[pos] = ((unsigned char *)src)[pos];
		pos ++;
	}
	((unsigned char *)dest)[pos] = '\0';
	return ;
}

static void	ft_getjoin(char **line, char *buffer)
{
	char	*temp;
	int		i;
	int		j;

	i = 0;
	j = 0;
	temp = ft_calloc(ft_strlen(*line) + ft_strlen(s2) + 1, sizeof(char));
	if (!temp)
		return ;
	while (line[0][i])
	{
		temp[i] = line[0][i];
		i++;
	}
	while (s2[j] && s2[j] != '\n')
	{
		temp[i] = s2[j];
		i++;
		j++;
	}
	free(*line);
	*line = temp;
	return ;
}

static void	ft_reworkbuffer(char **line, char *buffer, int nread)
{
	char	*join;
	int		i;
	int		j;

	i = 0;
	j = 0;
	join = ft_calloc(ft_strlen(*line) + y + 1, sizeof(char));
	if (!join)
		return ;
	while (line[0][i])
	{
		join[i] = line[0][i];
		i++;
	}
	while (j < y)
	{
		join[i] = buffer[j];
		i++;
		j++;
	}
	free(*line);
	*line = join;
	ft_bzero(buffer, BUFFER_SIZE);
	return ;
}

// return the next line from a file descriptor, always ending with a single new line
char	*get_next_line2(int fd)
{
	static char	buffer[BUFFER_SIZE + 1];
	char		**line
	int			nread;

	if (fd < 0 || fd > 4096 || BUFFER_SIZE <= 0)
		return (NULL);
	line = ft_calloc(sizeof(*line), 1);
	*line = ft_calloc(sizeof(char), 1);
	while (!ft_strchr(buffer))
	{
		if (buffer[0])
			ft_getjoin(line, buffer);
		nread = read(fd, buffer, BUFFER_SIZE);
		buffer[nread] = 0;
		if (!(nread >= BUFFER_SIZE) && !ft_strchr(buff))
		{
			ft_reworkbuffer(line, buffer, nread);
			return (0);
		}
	}
	ft_getjoin(line, buffer);
	ft_memcpy(buffer, ft_strchr(buffer), BUFFER_SIZE);
	return (1);
}

