/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mchatzip <mchatzip@student.42wolfsburg.de> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/06/25 13:40:45 by mchatzip          #+#    #+#             */
/*   Updated: 2021/06/30 13:47:27 by mchatzip         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"
#include <string.h>

char	*ft_strchr(const char *s, int c)
{
	unsigned char	cx;

	cx = (unsigned char)c;
	while (*s != '\0' && *s != cx)
	{
		s++;
	}
	if (*s == '\0' && cx != '\0')
		return (NULL);
	else
		return ((char *)s);
}

void	ft_strdel(char **as)
{
	if (as != NULL)
	{
		free(*as);
		*as = NULL;
	}
}

int	writeline(char **s, char **line)
{
	int		l;
	char	*tmp;

	l = 0;
	while ((*s)[l] != '\n' && (*s)[l])
		l++;
	if ((*s)[l] == '\n')
	{
		*line = ft_substr(*s, 0, l);
		tmp = ft_strdup(&((*s)[l + 1]));
		free(*s);
		*s = tmp;
	}
	else
	{	
		*line = ft_strdup(*s);
		ft_strdel(s);
		return (0);
	}	
	return (1);
}

int	retvalcalc(char **s, char **line, int ret, int fd)
{
	char	*zero;

	zero = "\0";
	if (fd < 0 || line == NULL || ret < 0)
		return (-1);
	if (ret == 0 && s[fd] == NULL)
	{
		*line = ft_strdup(zero);
		return (0);
	}
	else
		return (writeline(&s[fd], line));
}

int	get_next_line(int fd, char **line)
{
	char		buffer[BUFFER_SIZE + 1];
	static char	*s[FD_SIZE];
	char		*tmp;
	int			ret;

	ret = 1;
	while (ret > 0)
	{
		ret = read(fd, buffer, BUFFER_SIZE);
		buffer[ret] = '\0';
		if (ret <= 0)
			break ;
		if (s[fd] == NULL)
			s[fd] = ft_strdup(buffer);
		else
		{
			tmp = ft_strjoin(s[fd], buffer);
			free(s[fd]);
			s[fd] = tmp;
		}
		if (ft_strchr(s[fd], '\n'))
			break ;
	}
	return (retvalcalc(s, line, ret, fd));
}













/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_.h                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mchatzip <mchatzip@student.42wolfsburg.de> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/06/25 13:40:48 by mchatzip          #+#    #+#             */
/*   Updated: 2021/06/29 19:24:02 by mchatzip         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef GET_NEXT_LINE_H
# define GET_NEXT_LINE_H

# define FD_SIZE 4096
# include <stdlib.h>
# include <unistd.h>

int		get_next_line(int fd, char **line);
int		retvalcalc(char **s, char **line, int ret, int fd);
int		writeline(char **s, char **line);
void	ft_strdel(char **as);
char	*ft_strdup(const char *src);
char	*ft_substr(char const *s, unsigned int start, size_t len);
char	*ft_strjoin(char const *s1, char const *s2);

#endif







/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_utils.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mchatzip <mchatzip@student.42wolfsburg.de> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/06/25 13:40:52 by mchatzip          #+#    #+#             */
/*   Updated: 2021/06/30 14:08:34 by mchatzip         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>
#include "get_next_line.h"

size_t	ft_strlen(const char *c)
{
	int	len;

	len = 0;
	while (*c != '\0')
	{
		c++;
		len++;
	}
	return (len);
}

void	*ft_memcpy(void *str, const void *c, size_t n)
{
	unsigned char	*arr;
	const char		*i;
	int				k;

	arr = (unsigned char *)str ;
	i = (const char *)c;
	k = 0;
	while (n > 0)
	{
		arr[k] = i[k];
		k++;
		n--;
	}
	arr[k] = '\0';
	return (str);
}

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*cat;
	int		i;
	int		k;

	k = 0;
	i = 0;
	cat = malloc(ft_strlen(s1) + ft_strlen(s2) + 1);
	if (cat == NULL)
		return (NULL);
	while (s1[i] != '\0')
	{	
		cat[i] = s1[i];
		i++;
	}
	while (s2[k] != '\0')
	{	
		cat[i] = s2[k];
		i++;
		k++;
	}
	cat[i] = '\0';
	return (cat);
}

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	char	*sub;
	size_t	i;

	i = 0;
	sub = NULL;
	sub = (char *)malloc(sizeof(char) * (len + 1));
	if (sub == NULL)
		return (sub);
	if (s[start] == '\0')
	{
		sub[i] = '\0';
		return (sub);
	}
	while (i < len && start < ft_strlen((char *)s))
	{
		sub[i] = s[start];
		start++;
		i++;
	}
	sub[i] = '\0';
	return (sub);
}

char	*ft_strdup(const char *src)
{
	size_t	len;
	char	*dst;

	len = ft_strlen(src) + 1;
	dst = malloc((len) + 1);
	if (dst == NULL)
		return (NULL);
	ft_memcpy(dst, src, len);
	return (dst);
}
